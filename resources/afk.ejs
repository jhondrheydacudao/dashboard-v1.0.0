<!DOCTYPE html>
<html class="h-full">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>AFK Page</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          fontFamily: {
            cabin: ['Cabin', 'sans-serif'],
            grotesk: ['Space Grotesk', 'sans-serif'],
          }
        }
      }
    }
  </script>
  <link href="https://fonts.googleapis.com/css2?family=Cabin&family=Space+Grotesk&display=swap" rel="stylesheet">
  <style>
    body {
      margin: 0;
      overflow: hidden;
    }
    canvas {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -1;
    }
    @keyframes slideIn {
      0% {
        transform: translateY(-20px);
        opacity: 0;
      }
      100% {
        transform: translateY(0);
        opacity: 1;
      }
    }
    .animate-slide-in {
      animation: slideIn 0.4s ease-out;
    }
  </style>
</head>
<body class="bg-[#10181e]" style="font-family: 'Space Grotesk', sans-serif;">
  <!-- Background Canvas -->
  <canvas id="background"></canvas>

  <!-- Notification -->
  <div id="coinNotification" class="hidden fixed top-5 right-5 bg-green-600 text-white text-sm font-semibold px-4 py-2 rounded-lg shadow-lg animate-slide-in z-50">
    +90 Coins!
  </div>

  <!-- Sound -->
  <audio id="coinSound" src="https://cdn.pixabay.com/audio/2022/03/15/audio_5c74e6f10c.mp3" preload="auto"></audio>

  <!-- Content -->
  <main class="flex-grow container mx-auto px-4 py-8">
    <div class="flex justify-between items-center w-full mx-auto pb-4">
      <div class="flex flex-col">
        <h1 class="text-2xl text-white font-semibold mb-0.5 font-cabin">AFK Page</h1>
        <p class="text-gray-400 text-md">Earn free rewards for keeping this page open.</p>
      </div>
    </div>

    <div class="mt-24 flex justify-center">
      <div class="bg-white/5 backdrop-blur-md p-8 rounded-xl shadow-md w-full max-w-md text-center transition-all duration-500 hover:scale-105">
        <h2 class="text-3xl text-white font-bold mb-2">AFK & Earn</h2>
        <p class="text-gray-400 mb-6">Leave this page open to earn coins in real-time.</p>

        <div class="text-2xl font-bold text-white mb-4 animate-pulse">Stay AFK & Earn Rewards!</div>

        <div class="flex justify-center gap-3 mb-4 flex-wrap">
          <div class="bg-orange-600 text-white text-sm font-medium px-4 py-2 rounded-full shadow hover:bg-orange-700 transition">
            <span id="coinCountdown">Connecting...</span>
          </div>
          <div class="bg-gray-200 text-gray-800 text-sm font-medium px-4 py-2 rounded-full shadow hover:bg-gray-300 transition">
            <span id="sessionEarn">0</span> Coins Earned
          </div>
        </div>

        <p class="text-sm text-gray-400">AFK Time: <span class="text-white" id="afkTime">0 hours, 0 minutes, and 0 seconds</span></p>
      </div>
    </div>
  </main>

  <!-- Scripts -->
  <script>
    let session = 0;
    let afkTime = 0;
    let ws;

    function connect() {
      ws = new WebSocket(`${window.location.href.startsWith("https://") ? "wss" : "ws"}://${window.location.host}/afkwspath`);

      ws.onopen = () => {
        console.log("[WS] Connected.");
        document.getElementById("coinCountdown").innerText = "Earning Coins...";
        ws.send(JSON.stringify({ type: "ping" }));
      };

      ws.onmessage = (msg) => {
        let z = JSON.parse(msg.data);
        if (z.type === "count") {
          document.getElementById("coinCountdown").innerText = `${z.amount} seconds`;
          afkTime++;
          const hours = Math.floor(afkTime / 3600);
          const minutes = Math.floor((afkTime % 3600) / 60);
          const seconds = afkTime % 60;
          document.getElementById("afkTime").innerText = `${hours} hours, ${minutes} minutes, and ${seconds} seconds`;
        } else if (z.type === "coin") {
          session += 90;
          document.getElementById("sessionEarn").innerText = `${session} coins`;

          const notify = document.getElementById("coinNotification");
          const audio = document.getElementById("coinSound");

          notify.innerText = `+90 Coins!`;
          notify.classList.remove("hidden");
          notify.classList.add("animate-slide-in");
          audio.play();

          setTimeout(() => {
            notify.classList.add("hidden");
            notify.classList.remove("animate-slide-in");
          }, 2000);
        }
      };

      ws.onerror = (err) => {
        console.error("[WS] Error", err);
        reconnect();
      };

      ws.onclose = () => reconnect();
    }

    function reconnect() {
      document.getElementById("coinCountdown").innerText = "Reconnecting...";
      document.getElementById("sessionEarn").innerText = "Reconnecting...";
      setTimeout(connect, 1000);
    }

    connect();
  </script>

  <script>
    const canvas = document.getElementById("background");
    const ctx = canvas.getContext("2d");
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    let particlesArray = [];
    const numParticles = 100;

    class Particle {
      constructor() {
        this.x = Math.random() * canvas.width;
        this.y = Math.random() * canvas.height;
        this.size = Math.random() * 3 + 1;
        this.speedX = Math.random() * 3 - 1.5;
        this.speedY = Math.random() * 3 - 1.5;
      }

      update() {
        this.x += this.speedX;
        this.y += this.speedY;

        if (this.x < 0 || this.x > canvas.width) this.speedX *= -1;
        if (this.y < 0 || this.y > canvas.height) this.speedY *= -1;
      }

      draw() {
        ctx.fillStyle = "rgba(255, 255, 255, 0.8)";
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.closePath();
        ctx.fill();
      }
    }

    function initParticles() {
      particlesArray = [];
      for (let i = 0; i < numParticles; i++) {
        particlesArray.push(new Particle());
      }
    }

    function animateParticles() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      particlesArray.forEach(p => {
        p.update();
        p.draw();
      });
      requestAnimationFrame(animateParticles);
    }

    initParticles();
    animateParticles();
  </script>
</body>
</html>
